Extensibility:

I. Standard Extensibilities

Many patterns naturally will relate function and structure in general ways which we can understand.  Understanding these well in terms of design and extensibility is the difference between a job and a doingness. Let's take a look at how these break down.

    i.      Relating Supercomplexity toward Swith*

    Here we issue toward reuse of standard patterns in terms their manifold across and relating to the patterns issued at design and post-design time - specifically where these extend structure and therefore function beyond the simple interlinking of well understood pattern(s).

    We issue then in keeping with standard ordering logic the following:

        a. You will add components to a component

        b. You will add components to a series of components

        c. You will add components to a queue or very similar

        d. You will add components to a system or very similar

        e. You will add components to a logic

        f. You will add custom components

        g. You will add components pre/post/during design time

        h. You will need to add a queue to a component

        i. You will need to add a system to a component

        j. You will need to add a logic to a component

        k. You will need to add a queue to a system

        l. You will need to add a system to a system

        m. You will need to add a logic to a system

    Each of these will be a carry object.  We will take a look now at what this means for you, the developer.  As we progress in understanding the objects we intuit tend to mature as well.  These items will remain constant; you will expect to carry them in the delta set for reference.

    Now we need to shape our perspectives.  In what way then best to understand the relating pattern of adding, removing or altering components at pre/post/during design time, at runtime, across the permute of the list above?

        ia. Pre-Design Time

        Here we have s strong case for getting it all right to begin with.  Strong exceptions will be later adding unforeseeable requirements, lack of understandingness for it, or adding new developers or development processes. The objects here will be about gathering concepts and feelings about it the early fill-space we will conquer.

        The extensible set will maintain extensible features well.  What we will consider is how extensible the system should be.  We want the complete list of attributes to consider ahead of design time.  Here they are:

            a.  The object will need referencing

            b.  The object will need pointer reference

            c.  The object will need to be moved

            d.  The object will need a new degree of extensibility

            e.  The object will need lock(s) and/or locking features

            f.  The object will need to be encapsulated

            g.  The object will need to support an interface

            h.  The object will need a support mechanism (protocol or protocols)

            i.  The object will need to support a varying workload

            j.  The object will need to support scheduling

            k.  The object will need to use / infer logic

        These are considered two ways.  The programmer will want a clean way to move values in the 2-space of design.  The software itself will need a way to handle these at runtime.

        ib. Design Time

        ic. Post-Design Time

        id. Runtime

        ie. Errata

    We issue then in keeping with standard ordering logic the following:

        a. In extensible set a component must be

        b. In extensible set a component must be

    ii.     Direct System Related Extensibility Mapping

    The backing system is the object here; as we add to the program we need the extensibility in terms of speed and ease.  We add functionality in terms of understanding to maintain this edge in the sort.

    iii.    Indirect System Related Extensibility Mapping

    The programmer and/or designer are the object here.  Clear cut case of adding complexity by adding external constraints that are not a direct system value.

    iv.     Reorganization and Cleanliness

II. Specific Extensibilities

Certain patterns will have specific


Terms:

Swith: Super-smooth, low-latency coolness,, again

Darth: Break-even point for emperor

